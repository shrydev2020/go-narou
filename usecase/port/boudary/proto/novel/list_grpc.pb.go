// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package novel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NovelListClient is the client API for NovelList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NovelListClient interface {
	Get(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Novels, error)
}

type novelListClient struct {
	cc grpc.ClientConnInterface
}

func NewNovelListClient(cc grpc.ClientConnInterface) NovelListClient {
	return &novelListClient{cc}
}

func (c *novelListClient) Get(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Novels, error) {
	out := new(Novels)
	err := c.cc.Invoke(ctx, "/novel.NovelList/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NovelListServer is the server API for NovelList service.
// All implementations must embed UnimplementedNovelListServer
// for forward compatibility
type NovelListServer interface {
	Get(context.Context, *Req) (*Novels, error)
	mustEmbedUnimplementedNovelListServer()
}

// UnimplementedNovelListServer must be embedded to have forward compatible implementations.
type UnimplementedNovelListServer struct {
}

func (UnimplementedNovelListServer) Get(context.Context, *Req) (*Novels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNovelListServer) mustEmbedUnimplementedNovelListServer() {}

// UnsafeNovelListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NovelListServer will
// result in compilation errors.
type UnsafeNovelListServer interface {
	mustEmbedUnimplementedNovelListServer()
}

func RegisterNovelListServer(s grpc.ServiceRegistrar, srv NovelListServer) {
	s.RegisterService(&_NovelList_serviceDesc, srv)
}

func _NovelList_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NovelListServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/novel.NovelList/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NovelListServer).Get(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _NovelList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "novel.NovelList",
	HandlerType: (*NovelListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NovelList_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usecase/port/boudary/proto/novel/list.proto",
}
